snippet auto "auto"
${1:field} = models.AutoField()
endsnippet

snippet bool "bool"
${1:field} = models.BooleanField(${2:default=True})
endsnippet

snippet char "char"
${1:field} = models.CharField(max_length=${2}${3:, blank=True})
endsnippet

snippet comma "comma"
${1:field} = models.CommaSeparatedIntegerField(max_length=${2}${3:, blank=True})
endsnippet

snippet date "date"
${1:field} = models.DateField(${2:auto_now_add=True, auto_now=True}${3:, blank=True, null=True})
endsnippet

snippet datetime "datetime"
${1:field} = models.DateTimeField(${2:auto_now_add=True, auto_now=True}${3:, blank=True, null=True})
endsnippet

snippet decimal "decimal"
${1:field} = models.DecimalField(max_digits=${2}, decimal_places=${3})
endsnippet

snippet email "email"
${1:field} = models.EmailField(max_length=${2:75}${3:, blank=True})
endsnippet

snippet file "file"
${1:field} = models.FileField(upload_to=${2:path/for/upload}${3:, max_length=100})
endsnippet

snippet filepath "filepath"
${1:field} = models.FilePathField(path=${2:"/abs/path/to/dir"}${3:, max_length=100}${4:, match="*.ext"}${5:, recursive=True}${6:, blank=True, })
endsnippet

snippet float "float"
${1:field} = models.FloatField()
endsnippet

snippet image "image"
${1:field} = models.ImageField(upload_to=${2:path/for/upload}${3:, height_field=height, width_field=width}${4:, max_length=100})
endsnippet

snippet int "int"
${1:field} = models.IntegerField()
endsnippet

snippet ip "ip"
${1:field} = models.IPAddressField()
endsnippet

snippet nullbool "nullbool"
${1:field} = models.NullBooleanField()
endsnippet

snippet posint "posint"
${1:field} = models.PositiveIntegerField()
endsnippet

snippet possmallint "possmallint"
${1:field} = models.PositiveSmallIntegerField()
endsnippet

snippet slug "slug"
${1:field} = models.SlugField(max_length=${2:50}${3:, blank=True})
endsnippet

snippet smallint "smallint"
${1:field} = models.SmallIntegerField()
endsnippet

snippet text "text"
${1:field} = models.TextField(${2:blank=True})
endsnippet

snippet time "time"
${1:field} = models.TimeField(${2:auto_now_add=True, auto_now=True}${3:, blank=True, null=True})
endsnippet

snippet url "url"
${1:field} = models.URLField(${2:verify_exists=False}${3:, max_length=200}${4:, blank=True})
endsnippet

snippet xml "xml"
${1:field} = models.XMLField(schema_path=${2:None}${3:, blank=True})
endsnippet

snippet fk "fk"
${1:field} = models.ForeignKey(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, to_field=''})
endsnippet

snippet m2m "m2m"
${1:field} = models.ManyToManyField(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, symmetrical=False}${6:, through=''}${7:, db_table=''})
endsnippet

snippet o2o "o2o"
${1:field} = models.OneToOneField(${2:OtherModel}${3:, parent_link=True}${4:, related_name=''}${5:, limit_choices_to=}${6:, to_field=''})
endsnippet

snippet form "form"
class ${1:FormName}(forms.Form):
	"""${2:docstring}"""
	${3}
endsnippet

snippet model "model"
class ${1:ModelName}(models.Model):
	"""${2:docstring}"""
	${3}
	class Meta:
		${4}
	def __unicode__(self):
		${5}
	def save(self, force_insert=False, force_update=False):
		${6}
	@models.permalink
	def get_absolute_url(self):
		return ('${7:view_or_url_name}' ${8})
endsnippet

snippet admin "admin"
class ${1:ModelName}Admin(admin.ModelAdmin):
	${2:list_display = (,)}
admin.site.register($1, $1Admin)
endsnippet

snippet r2r "r2r"
return render_to_response(
	'${1:template}.html',
	${2},
	context_instance=RequestContext(request)
)
endsnippet

snippet tabularinline "tabularinline"
class ${1:ModelName}Inline(admin.TabularInline):
	model = $1
	extra = ${2:3}
endsnippet

snippet stackedinline "stackedinline"
class ${1:ModelName}Inline(admin.StackedInline):
	model = $1
	extra = ${2:3}
endsnippet

snippet rq "rq"
request
endsnippet

snippet rg "rg"
request.GET['${1:}']
endsnippet

snippet rgc "rgc"
request.GET
endsnippet

snippet rp "rp"
request.POST['${1:}']
endsnippet

snippet rpc "rpc"
request.POST
endsnippet

snippet ru "ru"
request.user
endsnippet

snippet set "set"
${1:}set = ${2:Model}.${3:objects}.${4:filter}(${5:owner=request.user})
endsnippet

snippet dg "dg"
@require_GET
endsnippet

snippet dp "dp"
@require_POST
endsnippet

snippet da "da"
@require_AJAX
endsnippet

snippet dl "dl"
@login_required
endsnippet

snippet db "db"
@check_blacklist
endsnippet

snippet r "r"
report(${1:level}, '${2:reason}')
endsnippet

snippet hr "hr"
return HttpResponse(${1})
endsnippet

snippet hrf "hrf"
return HttpResponseForbidden(${1})
endsnippet

snippet hrr "hrr"
return HttpResponseRedirect(${1})
endsnippet

snippet hrj "hrj"
return HttpResponse(json.dumps(${1:ret}))
endsnippet

snippet 404 "404"
raise Http404
endsnippet

snippet iu "iu"
from django.contrib.auth.models import User
endsnippet

snippet id "id"
from notifications.debug import debug
endsnippet

snippet vc "vc"
validator.clean['${1:}']
endsnippet

snippet vcc "vcc"
validator.clean
endsnippet

snippet ve "ve"
validator.errors['${1:}']
endsnippet

snippet vec "vec"
validator.errors
endsnippet
